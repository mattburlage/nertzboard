{"version":3,"sources":["components/Gameboard/Gameboard.js","components/Header/Header.js","assets/apiUrl.js","components/Gameboard/PointsForm/PointsForm.js","components/Gameboard/GameInfo/GameInfo.js","components/Gameboard/GameTable/GameTable.js","components/LoginForm/LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["myTimer","Header","props","toggle","bind","state","isOpen","toggleDarkMode","handle_logout","this","setState","e","preventDefault","adminLink","superUser","NavItem","NavLink","href","navbarClasses","darkMode","loggedIn","Navbar","className","expand","NavbarBrand","NavbarToggler","onClick","Collapse","navbar","Nav","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","divider","username","React","Component","apiUrl","PointsForm","points","nertz","gameData","handleChange","handleSubmit","name","target","value","prevState","newState","event","data","sendData","fetch","method","headers","Authorization","localStorage","getItem","body","JSON","stringify","then","res","json","handleUpdate","Form","onSubmit","Row","Col","xs","md","Input","placeholder","type","onChange","required","Button","color","block","GameInfo","sm","roomData","curround","game","GameTable","rounds","gameRows","upToDate","i","length","behindInRounds","maxRounds","newJsx","key","split","score","push","warningKey","Badge","pill","to","toggleAutoRefresh","autoRefresh","Table","Gameboard","isLoaded","updateScores","console","log","room_data","clearInterval","setInterval","Container","max_rounds","handleRefresh","LoginForm","handle_change","password","handleLogin","loginError","InputGroup","InputGroupAddon","addonType","InputGroupText","icon","faUser","autoComplete","faKey","tabIndex","App","handle_login","catch","status","statusText","details","non_field_errors","setItem","token","has_key","displayed_form","user","userData","handle_signup","removeItem","handleDarkModeToggle","height","width","timeout","loading","defaultRoute","isAuthed","Helmet","isAdmin","is_superuser","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.20d7c7f6.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport Container from \"reactstrap/es/Container\";\r\nimport PointsForm from \"./PointsForm/PointsForm\";\r\nimport GameInfo from \"./GameInfo/GameInfo\";\r\nimport GameTable from \"./GameTable/GameTable\";\r\nimport Spinner from \"reactstrap/es/Spinner\";\r\nimport apiUrl from \"../../assets/apiUrl\";\r\n\r\nlet myTimer;\r\n\r\nclass Gameboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoaded: false,\r\n            roomData: {},\r\n            rounds: {},\r\n            autoRefresh: false,\r\n        };\r\n        this.updateScores = this.updateScores.bind(this);\r\n        this.toggleAutoRefresh = this.toggleAutoRefresh.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateScores()\r\n    }\r\n\r\n    updateScores() {\r\n        console.log('Update Scores');\r\n        fetch(apiUrl + '/nertz/current_game_data/', {\r\n            headers: {\r\n                Authorization: `JWT ${localStorage.getItem('token')}`\r\n            }\r\n        })\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                this.setState({\r\n                    roomData: json.room_data,\r\n                    rounds: json.rounds,\r\n                    isLoaded: true,\r\n                });\r\n            });\r\n    }\r\n\r\n    toggleAutoRefresh () {\r\n        console.log('toggleAutoRefresh', this.state.autoRefresh);\r\n        if (this.state.autoRefresh) {\r\n            this.setState({\r\n                autoRefresh: false,\r\n            });\r\n            clearInterval(myTimer)\r\n        } else {\r\n            this.setState({\r\n                autoRefresh: true,\r\n            });\r\n            myTimer = setInterval(this.updateScores, 5000)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.isLoaded && false) {\r\n            return (\r\n                <div className={'mt-5 text-center'}><Spinner type={'grow'} color={'primary'} /><br/>Loading</div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <Container className='mt-3'>\r\n                <GameInfo roomData={this.state.roomData}/>\r\n                <PointsForm\r\n                    handleUpdate={this.updateScores}\r\n                />\r\n                <GameTable gameData={this.state.rounds}\r\n                           maxRounds={this.state.roomData.max_rounds}\r\n                           darkMode={this.props.darkMode}\r\n                           handleRefresh={this.updateScores}\r\n                           toggleAutoRefresh={this.toggleAutoRefresh}\r\n                           autoRefresh={this.state.autoRefresh}\r\n                />\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Gameboard;\r\n","import React from 'react';\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    UncontrolledDropdown,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem } from 'reactstrap';\r\n\r\nexport default class Header extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.toggle = this.toggle.bind(this);\r\n        this.state = {\r\n            isOpen: false,\r\n        };\r\n        this.toggleDarkMode = this.toggleDarkMode.bind(this);\r\n        this.handle_logout = this.handle_logout.bind(this);\r\n    }\r\n    toggle() {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n\r\n    toggleDarkMode() {\r\n        this.setState({\r\n            isOpen: false,\r\n        });\r\n        this.props.toggleDarkMode()\r\n    }\r\n\r\n    handle_logout(e) {\r\n        e.preventDefault();\r\n        this.setState({\r\n            isOpen: false,\r\n        });\r\n        this.props.handle_logout()\r\n    }\r\n\r\n    render() {\r\n        let adminLink = (\r\n            <div />\r\n        );\r\n\r\n        if (this.props.superUser) {\r\n            adminLink = (\r\n                <NavItem>\r\n                    <NavLink href=\"http://localhost:8000/admin\">Admin</NavLink>\r\n                </NavItem>\r\n            )\r\n        }\r\n\r\n        let navbarClasses = this.props.darkMode ? 'navbar-dark bg-dark' : 'navbar-light';\r\n\r\n        if (!this.props.loggedIn) {\r\n            return (\r\n                <div>\r\n                    <Navbar className={navbarClasses} expand=\"md\">\r\n                        <NavbarBrand>NertzBoard</NavbarBrand>\r\n                        <NavbarToggler onClick={this.toggle} />\r\n                        <Collapse isOpen={this.state.isOpen} navbar>\r\n                            <Nav navbar>\r\n                                <NavItem>\r\n                                    <NavLink href=\"/\">Log In</NavLink>\r\n                                </NavItem>\r\n                            </Nav>\r\n                        </Collapse>\r\n                    </Navbar>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Navbar className={navbarClasses} expand=\"md\">\r\n                    <NavbarBrand>NertzBoard</NavbarBrand>\r\n                    <NavbarToggler onClick={this.toggle} />\r\n                    <Collapse isOpen={this.state.isOpen} navbar>\r\n                        <Nav navbar>\r\n                            <NavItem>\r\n                                <NavLink href=\"/\">Current Game</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink href=\"/\">Statistics</NavLink>\r\n                            </NavItem>\r\n                            <UncontrolledDropdown nav inNavbar>\r\n                                <DropdownToggle nav caret>\r\n                                    Options\r\n                                </DropdownToggle>\r\n                                <DropdownMenu right>\r\n                                    <DropdownItem>\r\n                                        New Game\r\n                                    </DropdownItem>\r\n                                    {/*<DropdownItem>*/}\r\n                                    {/*    Leave Game*/}\r\n                                    {/*</DropdownItem>*/}\r\n                                    {/*<DropdownItem>*/}\r\n                                    {/*    Switch Room*/}\r\n                                    {/*</DropdownItem>*/}\r\n                                    <DropdownItem divider />\r\n                                    <DropdownItem onClick={this.toggleDarkMode}>\r\n                                        Toggle Dark Mode\r\n                                    </DropdownItem>\r\n                                </DropdownMenu>\r\n                            </UncontrolledDropdown>\r\n                            {adminLink}\r\n                            <NavItem>\r\n                                <NavLink href='/' onClick={this.handle_logout}>Log Out</NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                        <Nav navbar className={'ml-auto'}>\r\n                            <NavItem className={'navbar-text'}>\r\n                                Signed in as {this.props.username}\r\n                            </NavItem>\r\n\r\n                        </Nav>\r\n\r\n                    </Collapse>\r\n                </Navbar>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","const apiUrl = \"http://localhost:8000\";\r\n\r\nexport default apiUrl;\r\n","import React, {Component} from 'react';\r\nimport Col from \"reactstrap/es/Col\";\r\nimport Input from \"reactstrap/es/Input\";\r\nimport Button from \"reactstrap/es/Button\";\r\nimport Row from \"reactstrap/es/Row\";\r\nimport Form from \"reactstrap/es/Form\";\r\nimport apiUrl from \"../../../assets/apiUrl\";\r\n\r\n\r\nclass PointsForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            points: '',\r\n            nertz: '',\r\n            gameData: {},\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(e) {\r\n        const name = e.target.name;\r\n        const value = e.target.value;\r\n        this.setState(prevState => {\r\n            const newState = { ...prevState };\r\n            newState[name] = value;\r\n            return newState;\r\n        });\r\n    };\r\n\r\n    handleSubmit(event, data) {\r\n        event.preventDefault();\r\n\r\n        let sendData = {\r\n            'nertz': data.nertz,\r\n            'points': data.points,\r\n        };\r\n\r\n        fetch(apiUrl + '/nertz/submit_hand/', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `JWT ${localStorage.getItem('token')}`,\r\n            },\r\n            body: JSON.stringify(sendData)\r\n        })\r\n            .then(res => res.json())\r\n            .then(() => {\r\n                this.setState({\r\n                    nertz: '',\r\n                    points: '',\r\n                });\r\n                this.props.handleUpdate()\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form onSubmit={e => this.handleSubmit(e, this.state)}>\r\n                <Row className={'mt-3'}>\r\n                    <Col className={'d-none d-md-block'}/>\r\n                    <Col xs={4} md={3}>\r\n                        <Input name='nertz'\r\n                               placeholder='Nertz'\r\n                               type='number'\r\n                               value={this.state.nertz}\r\n                               onChange={this.handleChange}\r\n                               required\r\n                        />\r\n                    </Col>\r\n                    <Col xs={4} md={3}>\r\n                        <Input name='points'\r\n                               placeholder='Points'\r\n                               type='number'\r\n                               value={this.state.points}\r\n                               onChange={this.handleChange}\r\n                               required\r\n                        />\r\n                    </Col>\r\n                    <Col xs={4} md={3}>\r\n                        <Button color='primary' block>Submit</Button>\r\n                    </Col>\r\n                    <Col className={'d-none d-md-block'}/>\r\n                </Row>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PointsForm;\r\n","import React, {Component} from 'react';\r\nimport Col from \"reactstrap/es/Col\";\r\nimport Row from \"reactstrap/es/Row\";\r\n\r\nclass GameInfo extends Component {\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <Col sm={12}>\r\n                    <h4>Round: {this.props.roomData.curround}</h4>\r\n                    <h6>Game # {this.props.roomData.game}</h6>\r\n                    <h6>Room: {this.props.roomData.name}</h6>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameInfo;\r\n","import React, {Component} from 'react';\r\nimport Row from \"reactstrap/es/Row\";\r\nimport Col from \"reactstrap/es/Col\";\r\nimport Table from \"reactstrap/es/Table\";\r\nimport Badge from \"reactstrap/es/Badge\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass GameTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            gameData: this.props.gameData,\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let rounds = this.props.gameData;\r\n\r\n        let gameRows = [];\r\n        let upToDate = true;\r\n        for (let i = 0; i < rounds.length; i++) {\r\n            let behindInRounds = rounds[i].rounds < this.props.maxRounds;\r\n            if (behindInRounds) upToDate = false;\r\n\r\n            let newJsx = (\r\n                <tr key={i} className={ behindInRounds ? 'bg-warning color-black' : ''}>\r\n                    <td>{i+1}</td>\r\n                    <td>{rounds[i].name.split(' ')[0]}</td>\r\n                    <td>{rounds[i].score}</td>\r\n                </tr>\r\n            );\r\n\r\n            gameRows.push(newJsx)\r\n        }\r\n\r\n        let warningKey = (<div/>);\r\n        if (!upToDate) {\r\n            warningKey = (\r\n                <Row className={'text-center'}>\r\n                    <Col className={'text-center'}>\r\n                        <p className={'text-center small'}><Badge className={'small'} color=\"warning\" pill>&nbsp;</Badge>&nbsp;&nbsp;Awaiting submission for current round</p>\r\n                    </Col>\r\n                </Row>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Row className='mt-3'>\r\n                    <Col className={'d-none d-md-block'}/>\r\n                    <Col xs={12} md={6}>\r\n                        <div className={'mb-3'}>\r\n                            <Link to={'#'} onClick={this.props.toggleAutoRefresh}>\r\n                                Turn {this.props.autoRefresh ? 'Off' : 'On'} Auto-Refresh\r\n                            </Link>\r\n                        </div>\r\n                        <Table className={(this.props.darkMode ? 'table-dark' : '' ) + ' table-striped'}>\r\n                            <thead>\r\n                            <tr>\r\n                                <th>#</th>\r\n                                <th>Name</th>\r\n                                <th>Points</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {gameRows}\r\n                            </tbody>\r\n                        </Table>\r\n                    </Col>\r\n                    <Col className={'d-none d-md-block'}/>\r\n                </Row>\r\n                {warningKey}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameTable;\r\n","import React, {Component} from 'react';\r\nimport Container from \"reactstrap/es/Container\";\r\nimport Row from \"reactstrap/es/Row\";\r\nimport Col from \"reactstrap/es/Col\";\r\nimport CardGroup from \"reactstrap/es/CardGroup\";\r\nimport Card from \"reactstrap/es/Card\";\r\nimport CardBody from \"reactstrap/es/CardBody\";\r\nimport Form from \"reactstrap/es/Form\";\r\nimport InputGroup from \"reactstrap/es/InputGroup\";\r\nimport InputGroupAddon from \"reactstrap/es/InputGroupAddon\";\r\nimport InputGroupText from \"reactstrap/es/InputGroupText\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport { faKey, faUser } from '@fortawesome/free-solid-svg-icons'\r\nimport Input from \"reactstrap/es/Input\";\r\nimport Button from \"reactstrap/es/Button\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass LoginForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n        };\r\n        this.handle_change = this.handle_change.bind(this);\r\n    }\r\n\r\n    handle_change = e => {\r\n        const name = e.target.name;\r\n        const value = e.target.value;\r\n        this.setState(prevState => {\r\n            const newState = { ...prevState };\r\n            newState[name] = value;\r\n            return newState;\r\n        });\r\n    };\r\n\r\n    render() {\r\n        console.log('login page');\r\n        return (\r\n            <div className=\"app flex-row align-items-center\">\r\n                <Container>\r\n                    <Form onSubmit={e => this.props.handleLogin(e, this.state)}>\r\n                        <Row className=\"justify-content-center mt-5\">\r\n                            <Col md=\"4\">\r\n\r\n                                <h1>Login</h1>\r\n                                <p className=\"text-muted\">\r\n                                    {!!this.props.loginError ? this.props.loginError : 'Sign In to your account'}\r\n                                </p>\r\n                                <InputGroup className=\"mb-3\">\r\n                                    <InputGroupAddon addonType=\"prepend\">\r\n                                        <InputGroupText>\r\n                                            <FontAwesomeIcon icon={faUser} />\r\n                                        </InputGroupText>\r\n                                    </InputGroupAddon>\r\n                                    <Input name='username'\r\n                                           type=\"text\"\r\n                                           required\r\n                                           placeholder=\"Username\"\r\n                                           autoComplete=\"username\"\r\n                                           value={this.state.username}\r\n                                           onChange={this.handle_change}\r\n                                    />\r\n                                </InputGroup>\r\n                                <InputGroup className=\"mb-4\">\r\n                                    <InputGroupAddon addonType=\"prepend\">\r\n                                        <InputGroupText>\r\n                                            <FontAwesomeIcon icon={faKey} />\r\n                                        </InputGroupText>\r\n                                    </InputGroupAddon>\r\n                                    <Input name='password'\r\n                                           type=\"password\"\r\n                                           required\r\n                                           placeholder=\"Password\"\r\n                                           autoComplete=\"current-password\"\r\n                                           value={this.state.password}\r\n                                           onChange={this.handle_change}\r\n                                    />\r\n                                </InputGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col xs=\"12\" className='text-center'>\r\n                                <Button color=\"primary\" className=\"px-4 mr-2\">Login</Button>\r\n                            </Col>\r\n                            <Col xs=\"12\" className=\"text-center mt-3\">\r\n                                <Link to=\"/register\">\r\n                                    <Button color=\"link\" tabIndex={-1}>Register Now!</Button>\r\n                                </Link>\r\n                                {/*<Button color=\"link\" className=\"px-0\">Forgot password?</Button>*/}\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginForm;\r\n","import React from 'react';\r\n\r\nimport {Helmet} from \"react-helmet\";\r\nimport Header from \"./components/Header/Header\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport Gameboard from \"./components/Gameboard/Gameboard\";\r\nimport {Route, Switch} from \"react-router\";\r\nimport LoginForm from \"./components/LoginForm/LoginForm\";\r\nimport Loader from 'react-loader-spinner'\r\nimport apiUrl from \"./assets/apiUrl\";\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoaded: false,\r\n            darkMode: localStorage.getItem('nertz-dark') === 't',\r\n            has_key: !!localStorage.getItem('token'),\r\n            loginError: null,\r\n            username: '',\r\n            userData: {},\r\n        };\r\n        this.handleDarkModeToggle = this.handleDarkModeToggle.bind(this);\r\n        this.handle_login = this.handle_login.bind(this);\r\n        this.handle_signup = this.handle_signup.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.state.has_key) {\r\n            fetch('http://localhost:8000/nertz/current_user/', {\r\n                headers: {\r\n                    Authorization: `JWT ${localStorage.getItem('token')}`\r\n                }\r\n            })\r\n                .catch(res => {\r\n                    this.setState({\r\n                        loginError: res.status + ' ' + res.statusText,\r\n                    })\r\n                })\r\n                .then(res => res.json())\r\n                .then(json => {\r\n                    if (!json.details && !json.non_field_errors) {\r\n                        this.setState({\r\n                            username: json.username,\r\n                            isLoaded: true,\r\n                        });\r\n                    } else if(json.details) {\r\n                        this.setState({\r\n                            loginError: json.details,\r\n                            isLoaded: false,\r\n                        })\r\n                    } else if (json.non_field_errors) {\r\n                        this.setState({\r\n                            loginError: json.non_field_errors,\r\n                            isLoaded: false,\r\n                        })\r\n                    }\r\n                })\r\n        } else {\r\n            this.setState({\r\n                isLoaded: true,\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    handle_login = (e, data) => {\r\n        e.preventDefault();\r\n        fetch(apiUrl + '/token-auth/', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n            .catch(res => {\r\n                this.setState({\r\n                    loginError: res.status + ' ' + res.statusText,\r\n                })\r\n            })\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                if (!json.details && !json.non_field_errors) {\r\n                    localStorage.setItem('token', json.token);\r\n                    this.setState({\r\n                        has_key: !!localStorage.getItem('token'),\r\n                        displayed_form: '',\r\n                        username: json.user.username,\r\n                        userData: json.user,\r\n                    });\r\n                } else if(json.details) {\r\n                    this.setState({\r\n                        loginError: json.details,\r\n                    })\r\n                } else if (json.non_field_errors) {\r\n                    this.setState({\r\n                        loginError: json.non_field_errors,\r\n                    })\r\n                }\r\n            });\r\n    };\r\n\r\n    handle_signup = (e, data) => {\r\n        e.preventDefault();\r\n        fetch(apiUrl + '/nertz/users/', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                localStorage.setItem('token', json.token);\r\n                this.setState({\r\n                    has_key: !!localStorage.getItem('token'),\r\n                    displayed_form: '',\r\n                    username: json.username\r\n                });\r\n            });\r\n    };\r\n\r\n    handle_logout = () => {\r\n        localStorage.removeItem('token');\r\n        this.setState({ has_key: !!localStorage.getItem('token'), username: '' });\r\n    };\r\n\r\n    handleDarkModeToggle() {\r\n        if (this.state.darkMode) {\r\n            localStorage.setItem('nertz-dark', 'f')\r\n        } else {\r\n            localStorage.setItem('nertz-dark', 't')\r\n        }\r\n\r\n        this.setState({\r\n            darkMode: !this.state.darkMode,\r\n        })\r\n    }\r\n\r\n    loading() {\r\n        // TODO: enable dark mode loader\r\n        return (\r\n            <div className='mt-5 text-center'>\r\n                <Loader\r\n                    type=\"Puff\"\r\n                    color=\"#00BFFF\"\r\n                    height={200}\r\n                    width={200}\r\n                    timeout={3000} //3 secs\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.isLoaded) return this.loading();\r\n\r\n        let defaultRoute = (props) => <Gameboard darkMode={this.state.darkMode} {...props} isAuthed={true} />;\r\n        if (!this.state.has_key || !this.state.username) {\r\n            defaultRoute = (props) => <LoginForm handleLogin={this.handle_login}\r\n                                                 loginError={this.state.loginError}\r\n                                                 {...props} isAuthed={true} />\r\n        }\r\n        return (\r\n            <div className=\"App\">\r\n                <Helmet >\r\n                    <title>NertzBoard</title>\r\n                    <body className={this.state.darkMode ? 'color-mode-dark' : 'color-mode-light'} />\r\n                </Helmet>\r\n                <Header loggedIn={!!this.state.username}\r\n                        username={this.state.username}\r\n                        isAdmin={this.state.is_superuser}\r\n                        darkMode={this.state.darkMode}\r\n                        toggleDarkMode={this.handleDarkModeToggle}\r\n                        handle_logout={this.handle_logout}\r\n                />\r\n                <BrowserRouter >\r\n                    <Switch>\r\n                        <Route path=\"/\" render={defaultRoute} />\r\n                    </Switch>\r\n                </BrowserRouter>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}